name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd mcp-server
          uv sync --extra dev --frozen

      - name: Run linting
        run: |
          cd mcp-server
          uv run ruff check .
          uv run ruff format --check .

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd mcp-server
          uv sync --extra dev --frozen

      - name: Run security scan
        run: |
          cd mcp-server
          uv run bandit -r . -f json -o bandit-report.json || true
          uv run safety check

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: mcp-server/bandit-report.json

  publish-to-docker-hub:
    runs-on: ubuntu-latest
    needs: [lint, security-scan]
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: limbicnode42/db-mcp-server

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@5
        with:
          context: ./mcp-server
          file: ./mcp-server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/limbicnode42/db-mcp-server
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
