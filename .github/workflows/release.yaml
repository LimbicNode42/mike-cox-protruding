name: Release

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

jobs:
  # Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Security

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Security audit
        run: npm run security:check

      - name: TypeScript type check
        run: npx tsc --noEmit

  # Build and Test
  build:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run tests
        run: npm test

  # Release Docker Image
  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: limbicnode42/db-mcp-server
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner on release image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: limbicnode42/db-mcp-server:latest
          format: 'sarif'
          output: 'trivy-release-results.sarif'

      - name: Upload Trivy release scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-release-results.sarif'

      - name: Display Trivy scan results (fallback)
        if: failure()
        run: |
          echo "SARIF upload failed, displaying scan results:"
          cat trivy-release-results.sarif || echo "No scan results found"
